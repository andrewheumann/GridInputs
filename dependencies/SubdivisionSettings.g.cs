//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Spatial;
using Elements.Validators;
using Elements.Serialization.JSON;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Elements
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SubdivisionSettings 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SubdivisionSettings(int @count, double @targetLength, double @length, SubdivisionSettingsRemainderMode @remainderMode, SubdivisionSettingsCycleMode @cycleMode)
        {
            this.Count = @count;
            this.TargetLength = @targetLength;
            this.Length = @length;
            this.RemainderMode = @remainderMode;
            this.CycleMode = @cycleMode;
            }
        
        // Empty constructor
        public SubdivisionSettings()
        {
        }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; } = 1;
    
        [Newtonsoft.Json.JsonProperty("Target Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TargetLength { get; set; } = 1D;
    
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Length { get; set; } = 1D;
    
        [Newtonsoft.Json.JsonProperty("Remainder Mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubdivisionSettingsRemainderMode RemainderMode { get; set; } = Elements.SubdivisionSettingsRemainderMode.Remainder_at_both_ends;
    
        [Newtonsoft.Json.JsonProperty("Cycle Mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubdivisionSettingsCycleMode CycleMode { get; set; } = Elements.SubdivisionSettingsCycleMode.Cycle;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
}